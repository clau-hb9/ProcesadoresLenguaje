/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
	
	private double MEM[] = new double[100]; 
	private int position = 0;
	private boolean isDouble(Double number) {
		return number != null && number.intValue() != number;
  	}

	private String guardoResultadoMem (Integer position, Double result) {
		MEM[position] = result;			
		if (isDouble(result)) { return "Guardo MEM[" + position +"] = " + result; }
		else 			 	  { return "Guardo MEM[" + position +"] = " + result.intValue(); }
  	}

	

	private void result (Double number) {
		if (isDouble(number)) { System.out.println(number); }
		else 			 	  { System.out.println(number.intValue()); }
 	}
	
	private void setPosition(int i){
		position = i;
	}
	
	private int getPosition(){
		return position;
	}
	
	private void updateValuePosition(double value){
		MEM[getPosition()] = value;
	}

:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            	SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN, EXP, LOG, COS, SIN, DIVIDED, EQUALS;
terminal Integer    	MEM;
terminal Double	    	NUMBER;

/* Non terminals */

non terminal            expr_list, guardar;
non terminal Double	    A, B, C;
non terminal Integer	sign;


expr_list 	::=   expr_list A:a1 				SEMI    {: System.out.print("RESULTADO: ");result(a1); 			:}
            	| A:a1 							SEMI    {: System.out.print("RESULTADO: "); result(a1); 							:}
				| expr_list guardar:mem1 		SEMI    {: System.out.println(mem1);			:}
            	| guardar:mem1 					SEMI    {: System.out.println(mem1); :} 
            	
            	;
guardar		::= MEM:memoria EQUALS A:a1		{: RESULT = guardoResultadoMem(memoria, a1);	:}
				//| D:a1						{: RESULT = guardoResultadoMem(getPosition(), a1);	:}						
				;            				
				
  

            
A			::=   A:a1 PLUS    B:a2			{: RESULT = a1 + a2;	/*	System.out.println("Detecto la suma: " + a1 + "+" + a2 ); 	*/	:}
				| A:a1 MINUS   B:a2			{: RESULT = a1 - a2;	/*	System.out.println("Detecto la resta: " + a1 + "-" + a2 ); 	*/	:}
				| A:a1 MINUS MINUS 			{: RESULT = MEM[getPosition()];		updateValuePosition(MEM[getPosition()]-1.0); 			:}
				| A:a1 PLUS PLUS				{: RESULT = MEM[getPosition()];		updateValuePosition(MEM[getPosition()]+1.0); 		:}
				| B:a1						{: RESULT = a1; 			/*System.out.println("Genero A: " + a1  );		*/				:}
       			;
       			
       			
B			::=   B:a1 TIMES   C:a2			{: RESULT = a1 * a2; 		/*System.out.println("Detecto la multi: " + a1 + "*" + a2 );*/		:}
				| B:a1 DIVIDED C:a2			{: RESULT = a1 / a2; 		/*System.out.println("Detecto la div: " + a1 + "/" + a2 );	*/	:}
				
				| C:a1						{: RESULT = a1; 	 		/*System.out.println("Genero B: " + a1  );		*/				:}
       			;		
     			
       			
C			::=  EXP LPAREN   A:a1 RPAREN	{: RESULT = Math.exp(a1);	/*	System.out.println("Detecto el exp(" + a1 + ")" );	*/			:}
				| LOG LPAREN  A:a1 RPAREN	{: RESULT = Math.log(a1);	/*System.out.println("Detecto el log(" + a1 + ")" );	*/			:}
				| COS LPAREN  A:a1 RPAREN   {: RESULT = Math.cos(a1); 	/* 	System.out.println("Detecto el cos(" + a1 + ")" );	*/			:}
             	| SIN LPAREN  A:a1 RPAREN   {: RESULT = Math.sin(a1); 	/*  System.out.println("Detecto el sin(" + a1 + ")" );	*/			:}
             	| sign:signo LPAREN MINUS  MINUS MEM:memoria RPAREN	{: RESULT = signo*(MEM[memoria] - 1);	guardoResultadoMem(memoria, MEM[memoria]-1);		/*System.out.println("Detecto predecremento: --" + MEM[memoria]  ); */		:}
             	| sign:signo LPAREN PLUS   PLUS  MEM:memoria RPAREN	{: RESULT = signo *(MEM[memoria] + 1);	guardoResultadoMem(memoria, MEM[memoria]+1);		/*System.out.println("Detecto preincremento: ++" + MEM[memoria]  ); 	*/	:}
             	//| sign:signo LPAREN MEM:memoria MINUS  MINUS  RPAREN	{: RESULT = signo*(MEM[memoria]);	guardoResultadoMem(memoria, MEM[memoria]-1);		/*System.out.println("Detecto predecremento: --" + MEM[memoria]  ); */		:}
             	//| sign:signo LPAREN MEM:memoria PLUS   PLUS   RPAREN	{: RESULT = signo *(MEM[memoria] );	guardoResultadoMem(memoria, MEM[memoria]+1);		/*System.out.println("Detecto preincremento: ++" + MEM[memoria]  ); 	*/	:}
 				| MEM:memoria				{: RESULT = MEM[memoria];	setPosition(memoria);	/*System.out.println("Hola Cojo valor MEM[" + memoria +"] ="+ MEM[memoria]);*/	:}
       			| sign:signo  NUMBER:n	    {: RESULT = signo * n;  	/*System.out.println("Detecto el numero: " + n);	*/				:}		
       			| sign:signo  LPAREN A:a1 RPAREN    {: RESULT = signo * a1;  /*	System.out.println("Signo expresión: " + signo);*/		:}
       			
       			;


sign		::=  PLUS						{: RESULT =  1; 			/*System.out.println("Detecto signo + " );	*/					:} 
				|MINUS						{: RESULT = -1; 			/*System.out.println("Detecto signo - " );	*/					:}
				|							{: RESULT =  1; 			/*System.out.println("No detecto signo" );	*/					:}
				;

