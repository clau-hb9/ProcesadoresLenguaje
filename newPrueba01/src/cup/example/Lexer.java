/* The following code was generated by JFlex 1.3.5 on 23/5/21 15:46 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;
import cup.example.tables.*;
import java.io.BufferedReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 23/5/21 15:46 from the specification file
 * <tt>file:/C:/Users/claud/Desktop/newPrueba01/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\17\1\3\1\2\1\0\1\3\1\1\16\17\4\0\1\3\1\53"+
    "\2\0\1\15\1\0\1\52\1\14\1\44\1\45\1\21\1\12\1\41"+
    "\1\13\1\10\1\20\1\4\11\5\1\42\1\40\1\50\1\43\1\51"+
    "\2\0\1\30\1\32\1\23\1\33\1\11\1\16\2\15\1\37\2\15"+
    "\1\31\1\36\1\27\1\25\2\15\1\26\1\35\1\24\1\34\1\22"+
    "\1\15\1\6\2\15\1\46\1\0\1\47\1\0\1\15\1\0\1\30"+
    "\1\32\1\23\1\33\1\11\1\16\2\15\1\37\2\15\1\31\1\36"+
    "\1\27\1\25\2\15\1\26\1\35\1\24\1\34\1\22\1\15\1\6"+
    "\2\15\1\0\1\7\2\0\41\17\2\0\4\15\4\0\1\15\2\0"+
    "\1\17\7\0\1\15\4\0\1\15\5\0\27\15\1\0\37\15\1\0"+
    "\u01ca\15\4\0\14\15\16\0\5\15\7\0\1\15\1\0\1\15\21\0"+
    "\160\17\5\15\1\0\2\15\2\0\4\15\1\0\1\15\6\0\1\15"+
    "\1\0\3\15\1\0\1\15\1\0\24\15\1\0\123\15\1\0\213\15"+
    "\1\0\5\17\2\0\246\15\1\0\46\15\2\0\1\15\6\0\51\15"+
    "\6\0\1\15\1\0\55\17\1\0\1\17\1\0\2\17\1\0\2\17"+
    "\1\0\1\17\10\0\33\15\4\0\4\15\15\0\6\17\5\0\1\15"+
    "\4\0\13\17\1\0\1\17\3\0\53\15\37\17\4\0\2\15\1\17"+
    "\143\15\1\0\1\15\10\17\1\0\6\17\2\15\2\17\1\0\4\17"+
    "\2\15\12\17\3\15\2\0\1\15\17\0\1\17\1\15\1\17\36\15"+
    "\33\17\2\0\131\15\13\17\1\15\16\0\12\17\41\15\11\17\2\15"+
    "\4\0\1\15\2\0\1\17\30\15\4\17\1\15\11\17\1\15\3\17"+
    "\1\15\5\17\22\0\31\15\3\17\4\0\13\15\65\0\25\15\1\0"+
    "\22\15\13\0\61\17\66\15\3\17\1\15\22\17\1\15\7\17\12\15"+
    "\2\17\2\0\12\17\1\0\20\15\3\17\1\0\10\15\2\0\2\15"+
    "\2\0\26\15\1\0\7\15\1\0\1\15\3\0\4\15\2\0\1\17"+
    "\1\15\7\17\2\0\2\17\2\0\3\17\1\15\10\0\1\17\4\0"+
    "\2\15\1\0\3\15\2\17\2\0\12\17\4\15\7\0\2\15\1\0"+
    "\1\17\2\0\3\17\1\0\6\15\4\0\2\15\2\0\26\15\1\0"+
    "\7\15\1\0\2\15\1\0\2\15\1\0\2\15\2\0\1\17\1\0"+
    "\5\17\4\0\2\17\2\0\3\17\3\0\1\17\7\0\4\15\1\0"+
    "\1\15\7\0\14\17\3\15\1\17\13\0\3\17\1\0\11\15\1\0"+
    "\3\15\1\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\2\0"+
    "\1\17\1\15\10\17\1\0\3\17\1\0\3\17\2\0\1\15\17\0"+
    "\2\15\2\17\2\0\12\17\1\0\1\15\7\0\1\15\6\17\1\0"+
    "\3\17\1\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0"+
    "\2\15\1\0\5\15\2\0\1\17\1\15\7\17\2\0\2\17\2\0"+
    "\3\17\7\0\3\17\4\0\2\15\1\0\3\15\2\17\2\0\12\17"+
    "\1\0\1\15\20\0\1\17\1\15\1\0\6\15\3\0\3\15\1\0"+
    "\4\15\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15\3\0"+
    "\3\15\3\0\14\15\4\0\5\17\3\0\3\17\1\0\4\17\2\0"+
    "\1\15\6\0\1\17\16\0\12\17\11\0\1\15\6\0\5\17\10\15"+
    "\1\0\3\15\1\0\27\15\1\0\20\15\3\0\1\15\7\17\1\0"+
    "\3\17\1\0\4\17\7\0\2\17\1\0\3\15\5\0\2\15\2\17"+
    "\2\0\12\17\20\0\1\15\3\17\1\0\10\15\1\0\3\15\1\0"+
    "\27\15\1\0\12\15\1\0\5\15\2\0\1\17\1\15\7\17\1\0"+
    "\3\17\1\0\4\17\7\0\2\17\7\0\1\15\1\0\2\15\2\17"+
    "\2\0\12\17\1\0\2\15\15\0\4\17\11\15\1\0\3\15\1\0"+
    "\51\15\2\17\1\15\7\17\1\0\3\17\1\0\4\17\1\15\5\0"+
    "\3\15\1\17\7\0\3\15\2\17\2\0\12\17\12\0\6\15\1\0"+
    "\3\17\1\0\22\15\3\0\30\15\1\0\11\15\1\0\1\15\2\0"+
    "\7\15\3\0\1\17\4\0\6\17\1\0\1\17\1\0\10\17\6\0"+
    "\12\17\2\0\2\17\15\0\60\15\1\17\2\15\7\17\4\0\10\15"+
    "\10\17\1\0\12\17\47\0\2\15\1\0\1\15\1\0\5\15\1\0"+
    "\30\15\1\0\1\15\1\0\12\15\1\17\2\15\11\17\1\15\2\0"+
    "\5\15\1\0\1\15\1\0\6\17\2\0\12\17\2\0\4\15\40\0"+
    "\1\15\27\0\2\17\6\0\12\17\13\0\1\17\1\0\1\17\1\0"+
    "\1\17\4\0\2\17\10\15\1\0\44\15\4\0\24\17\1\0\2\17"+
    "\5\15\13\17\1\0\44\17\11\0\1\17\71\0\53\15\24\17\1\15"+
    "\12\17\6\0\6\15\4\17\4\15\3\17\1\15\3\17\2\15\7\17"+
    "\3\15\4\17\15\15\14\17\1\15\17\17\2\0\46\15\1\0\1\15"+
    "\5\0\1\15\2\0\53\15\1\0\u014d\15\1\0\4\15\2\0\7\15"+
    "\1\0\1\15\1\0\4\15\2\0\51\15\1\0\4\15\2\0\41\15"+
    "\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\17\15"+
    "\1\0\71\15\1\0\4\15\2\0\103\15\2\0\3\17\40\0\20\15"+
    "\20\0\126\15\2\0\6\15\3\0\u026c\15\2\0\21\15\1\0\32\15"+
    "\5\0\113\15\3\0\13\15\7\0\15\15\1\0\4\15\3\17\13\0"+
    "\22\15\3\17\13\0\22\15\2\17\14\0\15\15\1\0\3\15\1\0"+
    "\2\17\14\0\64\15\40\17\3\0\1\15\3\0\2\15\1\17\2\0"+
    "\12\17\41\0\4\17\1\0\12\17\6\0\131\15\7\0\5\15\2\17"+
    "\42\15\1\17\1\15\5\0\106\15\12\0\37\15\1\0\14\17\4\0"+
    "\14\17\12\0\12\17\36\15\2\0\5\15\13\0\54\15\4\0\32\15"+
    "\6\0\12\17\46\0\27\15\5\17\4\0\65\15\12\17\1\0\35\17"+
    "\2\0\13\17\6\0\12\17\15\0\1\15\10\0\16\17\1\0\2\17"+
    "\77\0\5\17\57\15\21\17\7\15\4\0\12\17\21\0\11\17\14\0"+
    "\3\17\36\15\15\17\2\15\12\17\54\15\16\17\14\0\44\15\24\17"+
    "\10\0\12\17\3\0\3\15\12\17\44\15\2\0\11\15\7\0\53\15"+
    "\2\0\3\15\20\0\3\17\1\0\25\17\4\15\1\17\6\15\1\17"+
    "\2\15\3\17\1\15\5\0\300\15\72\17\1\0\5\17\u0116\15\2\0"+
    "\6\15\2\0\46\15\2\0\6\15\2\0\10\15\1\0\1\15\1\0"+
    "\1\15\1\0\1\15\1\0\37\15\2\0\65\15\1\0\7\15\1\0"+
    "\1\15\3\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15\4\0"+
    "\15\15\5\0\3\15\1\0\7\15\16\0\5\17\32\0\5\17\20\0"+
    "\2\15\23\0\1\15\13\0\5\17\1\0\12\17\1\0\1\15\15\0"+
    "\1\15\20\0\15\15\3\0\40\15\20\0\15\17\4\0\1\17\3\0"+
    "\14\17\21\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0"+
    "\5\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15\1\0"+
    "\13\15\2\0\4\15\5\0\5\15\4\0\1\15\21\0\51\15\u0a77\0"+
    "\57\15\1\0\57\15\1\0\205\15\6\0\4\15\3\17\2\15\14\0"+
    "\46\15\1\0\1\15\5\0\1\15\2\0\70\15\7\0\1\15\17\0"+
    "\1\17\27\15\11\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15"+
    "\1\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0\40\17"+
    "\57\0\1\15\u01d5\0\3\15\31\0\11\15\6\17\1\0\5\15\2\0"+
    "\5\15\4\0\126\15\2\0\2\17\2\0\3\15\1\0\132\15\1\0"+
    "\4\15\5\0\53\15\1\0\136\15\21\0\40\15\60\0\20\15\u0200\0"+
    "\u19c0\15\100\0\u51fd\15\3\0\u048d\15\103\0\56\15\2\0\u010d\15\3\0"+
    "\20\15\12\17\2\15\24\0\57\15\1\17\4\0\12\17\1\0\37\15"+
    "\2\17\120\15\2\17\45\0\11\15\2\0\147\15\2\0\65\15\2\0"+
    "\11\15\52\0\15\15\1\17\3\15\1\17\4\15\1\17\27\15\5\17"+
    "\4\0\1\17\13\0\1\15\7\0\64\15\14\0\2\17\62\15\22\17"+
    "\12\0\12\17\6\0\22\17\6\15\3\0\1\15\1\0\2\15\13\17"+
    "\34\15\10\17\2\0\27\15\15\17\14\0\35\15\3\0\4\17\57\15"+
    "\16\17\16\0\1\15\12\17\6\0\5\15\1\17\12\15\12\17\5\15"+
    "\1\0\51\15\16\17\11\0\3\15\1\17\10\15\2\17\2\0\12\17"+
    "\6\0\27\15\3\0\1\15\3\17\62\15\1\17\1\15\3\17\2\15"+
    "\2\17\5\15\2\17\1\15\1\17\1\15\30\0\3\15\2\0\13\15"+
    "\5\17\2\0\3\15\2\17\12\0\6\15\2\0\6\15\2\0\6\15"+
    "\11\0\7\15\1\0\7\15\1\0\53\15\1\0\16\15\6\0\163\15"+
    "\10\17\1\0\2\17\2\0\12\17\6\0\u2ba4\15\14\0\27\15\4\0"+
    "\61\15\u2104\0\u016e\15\2\0\152\15\46\0\7\15\14\0\5\15\5\0"+
    "\1\15\1\17\12\15\1\0\15\15\1\0\5\15\1\0\1\15\1\0"+
    "\2\15\1\0\2\15\1\0\154\15\41\0\u016b\15\22\0\100\15\2\0"+
    "\66\15\50\0\15\15\3\0\20\17\20\0\20\17\3\0\2\15\30\0"+
    "\3\15\31\0\1\15\6\0\5\15\1\0\207\15\2\0\1\17\4\0"+
    "\1\15\13\0\12\17\7\0\32\15\4\0\1\15\1\0\32\15\13\0"+
    "\131\15\3\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0"+
    "\2\15\3\0\2\15\22\0\3\17\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    44,    88,   132,    88,   176,   220,   264,    88,   308, 
       88,    88,   352,   396,   440,    88,   484,   528,   572,   616, 
      660,   704,   748,   792,   836,   880,    88,    88,   924,   968, 
       88,    88,    88,    88,    88,    88,    88,    88,  1012,  1056, 
     1100,  1144,  1188,  1232,  1276,  1320,  1320,  1364,  1408,  1452, 
     1496,  1540,  1584,  1628,   264,  1672,  1716,  1760,  1804,  1848, 
     1892,    88,    88,  1056,  1936,  1980,  1980,  2024,    88,  2068, 
     2112,  2156,  2200,  2244,  2288,  2332,   264,   264,  2376,  2420, 
     2464,  2508,  2552,  2596,  2640,  2684,  2728,  2772,  2816,   264, 
      264,  2860,   264,  2904,  2948,  2992,  3036,   264,  3080,  3124, 
     3168,  3212,  3256,   264,  3300,  3344,  3388,   264,  3432,  3476, 
     3520,  3564,   264,  3608,  3652,  3696,  3740,   264,  3784,   264, 
      264,  3828,  3872,   264
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\10\1\16\1\3\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\10\1\30\2\10\1\31\1\32\1\10\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\54\3\56\0\1\5\55\0\2\47\1\50"+
    "\1\0\1\51\47\0\2\52\2\0\1\53\1\54\46\0"+
    "\3\10\2\0\1\10\3\0\3\10\2\0\16\10\20\0"+
    "\3\10\2\0\1\10\3\0\3\10\2\0\5\10\1\55"+
    "\10\10\14\0\2\56\1\0\11\56\1\57\37\56\4\0"+
    "\3\10\2\0\1\10\3\0\3\10\2\0\6\10\1\60"+
    "\6\10\1\61\34\0\1\62\1\63\36\0\3\10\2\0"+
    "\1\64\3\0\3\10\2\0\16\10\20\0\3\10\2\0"+
    "\1\10\3\0\3\10\2\0\6\10\1\65\7\10\20\0"+
    "\3\10\2\0\1\10\3\0\3\10\2\0\4\10\1\66"+
    "\11\10\20\0\3\10\2\0\1\10\3\0\3\10\2\0"+
    "\4\10\1\67\11\10\20\0\3\10\2\0\1\70\3\0"+
    "\3\10\2\0\16\10\20\0\3\10\2\0\1\10\3\0"+
    "\3\10\2\0\3\10\1\71\12\10\20\0\3\10\2\0"+
    "\1\10\3\0\3\10\2\0\5\10\1\72\10\10\20\0"+
    "\3\10\2\0\1\10\3\0\3\10\2\0\3\10\1\73"+
    "\12\10\20\0\3\10\2\0\1\10\3\0\3\10\2\0"+
    "\15\10\1\74\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\15\10\1\75\57\0\1\76\53\0\1\77\14\0"+
    "\2\47\2\0\1\51\47\0\2\100\1\0\1\100\1\0"+
    "\1\100\4\0\1\100\4\0\1\100\4\0\1\100\1\0"+
    "\2\100\24\0\2\51\52\0\2\52\2\0\1\51\47\0"+
    "\2\101\52\0\2\102\4\0\2\103\44\0\3\10\2\0"+
    "\1\10\3\0\3\10\2\0\2\10\1\104\13\10\30\0"+
    "\1\105\43\0\3\10\2\0\1\10\3\0\3\10\2\0"+
    "\7\10\1\106\6\10\20\0\3\10\2\0\1\10\3\0"+
    "\3\10\2\0\5\10\1\107\10\10\14\0\1\62\1\4"+
    "\1\5\51\62\21\63\1\110\32\63\4\0\3\10\2\0"+
    "\1\10\3\0\3\10\2\0\1\10\1\111\14\10\20\0"+
    "\3\10\2\0\1\10\3\0\3\10\2\0\4\10\1\112"+
    "\11\10\20\0\3\10\2\0\1\10\3\0\3\10\2\0"+
    "\12\10\1\113\3\10\20\0\3\10\2\0\1\10\3\0"+
    "\3\10\2\0\6\10\1\114\7\10\20\0\3\10\2\0"+
    "\1\10\3\0\3\10\2\0\2\10\1\115\13\10\20\0"+
    "\3\10\2\0\1\10\3\0\3\10\2\0\11\10\1\116"+
    "\4\10\20\0\3\10\2\0\1\10\3\0\3\10\2\0"+
    "\3\10\1\117\12\10\20\0\3\10\2\0\1\10\3\0"+
    "\3\10\2\0\5\10\1\120\10\10\20\0\3\10\2\0"+
    "\1\121\3\0\3\10\2\0\16\10\20\0\2\101\3\0"+
    "\1\54\46\0\2\102\52\0\3\10\2\0\1\122\3\0"+
    "\3\10\2\0\3\10\1\123\1\124\11\10\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\13\10\1\125\2\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\13\10"+
    "\1\126\1\127\1\10\14\0\20\63\1\5\1\110\32\63"+
    "\4\0\3\10\2\0\1\10\3\0\3\10\2\0\2\10"+
    "\1\130\13\10\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\6\10\1\131\7\10\20\0\3\10\2\0\1\132"+
    "\3\0\3\10\2\0\16\10\20\0\3\10\2\0\1\10"+
    "\3\0\3\10\2\0\7\10\1\133\6\10\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\7\10\1\134\6\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\3\10"+
    "\1\135\12\10\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\5\10\1\136\10\10\20\0\3\10\2\0\1\10"+
    "\3\0\3\10\2\0\4\10\1\137\11\10\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\5\10\1\140\10\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\6\10"+
    "\1\141\7\10\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\3\10\1\132\12\10\20\0\3\10\2\0\1\10"+
    "\3\0\3\10\2\0\15\10\1\142\20\0\3\10\2\0"+
    "\1\10\3\0\3\10\2\0\15\10\1\143\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\3\10\1\144\12\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\1\10"+
    "\1\145\14\10\20\0\3\10\2\0\1\146\3\0\3\10"+
    "\2\0\16\10\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\2\10\1\147\13\10\20\0\3\10\2\0\1\10"+
    "\3\0\3\10\2\0\3\10\1\150\12\10\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\1\10\1\151\14\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\11\10"+
    "\1\152\4\10\20\0\3\10\2\0\1\153\3\0\3\10"+
    "\2\0\16\10\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\4\10\1\154\11\10\20\0\3\10\2\0\1\10"+
    "\3\0\3\10\2\0\2\10\1\155\13\10\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\6\10\1\156\7\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\4\10"+
    "\1\157\11\10\20\0\3\10\2\0\1\160\3\0\3\10"+
    "\2\0\16\10\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\6\10\1\161\7\10\20\0\3\10\2\0\1\10"+
    "\3\0\3\10\2\0\5\10\1\162\10\10\20\0\3\10"+
    "\2\0\1\163\3\0\3\10\2\0\16\10\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\5\10\1\164\10\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\6\10"+
    "\1\165\7\10\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\13\10\1\166\2\10\20\0\3\10\2\0\1\10"+
    "\3\0\3\10\2\0\2\10\1\167\13\10\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\4\10\1\170\11\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\3\10"+
    "\1\170\12\10\20\0\3\10\2\0\1\10\3\0\3\10"+
    "\2\0\13\10\1\171\2\10\20\0\3\10\2\0\1\10"+
    "\3\0\3\10\2\0\4\10\1\172\11\10\20\0\3\10"+
    "\2\0\1\10\3\0\3\10\2\0\6\10\1\173\7\10"+
    "\20\0\3\10\2\0\1\10\3\0\3\10\2\0\13\10"+
    "\1\174\2\10\14\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  9,  1,  9,  9,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  9,  9, 
     9,  9,  9,  9,  9,  9,  0,  0,  1,  1,  1,  0,  1,  0,  1,  1, 
     1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1, 
     1,  1,  0,  1,  9,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	
	private TablaSimbolos tabla;
	private TablaVectores tablaVectores;
	private Object entrada;
	BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
	

 	private static int actualEtq=0;
 	private static String nuevaEtq() {
 		return "etqL"+(++actualEtq);
 	}

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is, TablaSimbolos t, TablaVectores t1){
		this(is);
        symbolFactory = sf;
        this.tabla = t;
        this.tablaVectores = t1;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader, TablaSimbolos t, TablaVectores t1){
		this(reader);
        symbolFactory = sf;
        this.tabla = t;
        this.tablaVectores = t1;
        
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3916];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2312) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 120: 
          {  return symbolFactory.newSymbol("WHILE", 	  	WHILE, nuevaEtq()); 														 }
        case 125: break;
        case 26: 
          {  return symbolFactory.newSymbol("SEMI", 		SEMI); 															 }
        case 126: break;
        case 15: 
          {  return symbolFactory.newSymbol("TIMES", 		TIMES); 														 }
        case 127: break;
        case 10: 
          {  return symbolFactory.newSymbol("PLUS", 		PLUS); 															 }
        case 128: break;
        case 11: 
          {  return symbolFactory.newSymbol("MINUS", 		MINUS); 														 }
        case 129: break;
        case 36: 
          {  return symbolFactory.newSymbol("AND", 	    AND);															 }
        case 130: break;
        case 37: 
          {  return symbolFactory.newSymbol("NOT", 	    NOT);															 }
        case 131: break;
        case 76: 
          {  return symbolFactory.newSymbol("NOT", 	    NOT); 															 }
        case 132: break;
        case 103: 
          {  return symbolFactory.newSymbol("VARTYPE",    	VARTYPE, 		yytext()); 											 }
        case 133: break;
        case 3: 
        case 4: 
          {                                }
        case 134: break;
        case 59: 
          {  return symbolFactory.newSymbol("IF", 	      	IF, nuevaEtq() ); 														     }
        case 135: break;
        case 2: 
        case 12: 
        case 28: 
        case 29: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 136: break;
        case 7: 
        case 9: 
        case 13: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 44: 
        case 47: 
        case 48: 
        case 51: 
        case 52: 
        case 53: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 60: 
        case 67: 
        case 69: 
        case 70: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 91: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 104: 
        case 105: 
        case 106: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 118: 
        case 121: 
        case 122: 
          {  Simbolo s ;
			  				if (( s = tabla.buscar(yytext())) == null){
			  					s = tabla.insertar(yytext());
			  				}
			  				return symbolFactory.newSymbol("IDENT",     	IDENT, s );	     }
        case 137: break;
        case 112: 
          {  entrada =  reader.readLine(); System.out.println(entrada);return symbolFactory.newSymbol("ENTRADA", 	    ENTRADA, entrada ); 															 }
        case 138: break;
        case 35: 
          {  return symbolFactory.newSymbol("MAYORQUE", 	MAYORQUE); 														 }
        case 139: break;
        case 14: 
          {  return symbolFactory.newSymbol("DIVISION", 	DIVISION); 														 }
        case 140: break;
        case 21: 
          {  return symbolFactory.newSymbol("UMINUS", 		UMINUS); 														 }
        case 141: break;
        case 117: 
          {  return symbolFactory.newSymbol("THEN", 	    THEN); 															 }
        case 142: break;
        case 63: 
          {  return symbolFactory.newSymbol("ENTERO",   	ENTERO, 	  		Long.decode(yytext()).intValue());			 }
        case 143: break;
        case 92: 
          {  return symbolFactory.newSymbol("ELSE", 	    ELSE); 														     }
        case 144: break;
        case 31: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN); 															 }
        case 145: break;
        case 54: 
          {  return symbolFactory.newSymbol("OR", 	      	OR); 														     }
        case 146: break;
        case 119: 
          {  return symbolFactory.newSymbol("VARTYPE", 	VARTYPE, 		yytext());											 }
        case 147: break;
        case 90: 
          {  return symbolFactory.newSymbol("VARTYPE",		VARTYPE, 		yytext());											 }
        case 148: break;
        case 8: 
          {  return symbolFactory.newSymbol("OR", 	        OR);															 }
        case 149: break;
        case 89: 
          {  return symbolFactory.newSymbol("BOOLEAN",   	BOOLEAN, 	  	Boolean.parseBoolean(yytext())); 				 }
        case 150: break;
        case 34: 
          {  return symbolFactory.newSymbol("MENORQUE", 	MENORQUE); 														 }
        case 151: break;
        case 77: 
          {  return symbolFactory.newSymbol("AND", 	    AND); 														     }
        case 152: break;
        case 30: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN); 															 }
        case 153: break;
        case 61: 
          {  return symbolFactory.newSymbol("ASIGNACION", 	ASIGNACION);													 }
        case 154: break;
        case 62: 
          {  return symbolFactory.newSymbol("IGUALQUE", 	IGUALQUE);														 }
        case 155: break;
        case 5: 
        case 6: 
        case 41: 
          {  return symbolFactory.newSymbol("ENTERO",   	ENTERO, 	  		Integer.parseInt(yytext()));					 }
        case 156: break;
        case 65: 
          {  return symbolFactory.newSymbol("REAL",  		REAL, 				Double.parseDouble(yytext())); 					 }
        case 157: break;
        case 97: 
          {  return symbolFactory.newSymbol("ENDIF", 	  	ENDIF); 														 }
        case 158: break;
        case 123: 
          {  return symbolFactory.newSymbol("ENDWHILE",  	ENDWHILE); 														 }
        case 159: break;
        case 107: 
          {  return symbolFactory.newSymbol("VECTOR", 	  	VECTOR); 															 }
        case 160: break;
        case 33: 
          {  return symbolFactory.newSymbol("RBRACKET",  	RBRACKET); 													     }
        case 161: break;
        case 32: 
          {  return symbolFactory.newSymbol("LBRACKET",  	LBRACKET); 													     }
        case 162: break;
        case 27: 
          {  return symbolFactory.newSymbol("COMA", 	  	COMA); 															 }
        case 163: break;
        case 40: 
        case 42: 
        case 64: 
          {  return symbolFactory.newSymbol("REAL", 	    REAL, 	    		Double.parseDouble(yytext())); 					 }
        case 164: break;
        case 46: 
        case 68: 
          {  return symbolFactory.newSymbol("CARACTER", 	CARACTER, 			yytext().charAt(1)); 					         }
        case 165: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
