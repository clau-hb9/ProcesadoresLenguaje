/* The following code was generated by JFlex 1.3.5 on 20/5/21 23:16 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;
import cup.example.tables.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 20/5/21 23:16 from the specification file
 * <tt>file:/C:/Users/claud/Desktop/newPrueba01/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\20\1\3\1\2\1\0\1\3\1\1\16\20\4\0\1\3\3\0"+
    "\1\16\3\0\1\36\1\37\1\15\1\12\1\0\1\13\1\10\1\14"+
    "\1\4\11\5\1\34\1\33\1\40\1\35\1\41\2\0\1\27\1\31"+
    "\1\22\1\32\1\11\1\17\5\16\1\30\1\16\1\26\1\24\2\16"+
    "\1\25\1\16\1\23\1\16\1\21\1\16\1\6\2\16\4\0\1\16"+
    "\1\0\1\27\1\31\1\22\1\32\1\11\1\17\5\16\1\30\1\16"+
    "\1\26\1\24\2\16\1\25\1\16\1\23\1\16\1\21\1\16\1\6"+
    "\2\16\1\0\1\7\2\0\41\20\2\0\4\16\4\0\1\16\2\0"+
    "\1\20\7\0\1\16\4\0\1\16\5\0\27\16\1\0\37\16\1\0"+
    "\u01ca\16\4\0\14\16\16\0\5\16\7\0\1\16\1\0\1\16\21\0"+
    "\160\20\5\16\1\0\2\16\2\0\4\16\1\0\1\16\6\0\1\16"+
    "\1\0\3\16\1\0\1\16\1\0\24\16\1\0\123\16\1\0\213\16"+
    "\1\0\5\20\2\0\246\16\1\0\46\16\2\0\1\16\6\0\51\16"+
    "\6\0\1\16\1\0\55\20\1\0\1\20\1\0\2\20\1\0\2\20"+
    "\1\0\1\20\10\0\33\16\4\0\4\16\15\0\6\20\5\0\1\16"+
    "\4\0\13\20\1\0\1\20\3\0\53\16\37\20\4\0\2\16\1\20"+
    "\143\16\1\0\1\16\10\20\1\0\6\20\2\16\2\20\1\0\4\20"+
    "\2\16\12\20\3\16\2\0\1\16\17\0\1\20\1\16\1\20\36\16"+
    "\33\20\2\0\131\16\13\20\1\16\16\0\12\20\41\16\11\20\2\16"+
    "\4\0\1\16\2\0\1\20\30\16\4\20\1\16\11\20\1\16\3\20"+
    "\1\16\5\20\22\0\31\16\3\20\4\0\13\16\65\0\25\16\1\0"+
    "\22\16\13\0\61\20\66\16\3\20\1\16\22\20\1\16\7\20\12\16"+
    "\2\20\2\0\12\20\1\0\20\16\3\20\1\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\1\16\3\0\4\16\2\0\1\20"+
    "\1\16\7\20\2\0\2\20\2\0\3\20\1\16\10\0\1\20\4\0"+
    "\2\16\1\0\3\16\2\20\2\0\12\20\4\16\7\0\2\16\1\0"+
    "\1\20\2\0\3\20\1\0\6\16\4\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\2\16\1\0\2\16\2\0\1\20\1\0"+
    "\5\20\4\0\2\20\2\0\3\20\3\0\1\20\7\0\4\16\1\0"+
    "\1\16\7\0\14\20\3\16\1\20\13\0\3\20\1\0\11\16\1\0"+
    "\3\16\1\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0"+
    "\1\20\1\16\10\20\1\0\3\20\1\0\3\20\2\0\1\16\17\0"+
    "\2\16\2\20\2\0\12\20\1\0\1\16\7\0\1\16\6\20\1\0"+
    "\3\20\1\0\10\16\2\0\2\16\2\0\26\16\1\0\7\16\1\0"+
    "\2\16\1\0\5\16\2\0\1\20\1\16\7\20\2\0\2\20\2\0"+
    "\3\20\7\0\3\20\4\0\2\16\1\0\3\16\2\20\2\0\12\20"+
    "\1\0\1\16\20\0\1\20\1\16\1\0\6\16\3\0\3\16\1\0"+
    "\4\16\3\0\2\16\1\0\1\16\1\0\2\16\3\0\2\16\3\0"+
    "\3\16\3\0\14\16\4\0\5\20\3\0\3\20\1\0\4\20\2\0"+
    "\1\16\6\0\1\20\16\0\12\20\11\0\1\16\6\0\5\20\10\16"+
    "\1\0\3\16\1\0\27\16\1\0\20\16\3\0\1\16\7\20\1\0"+
    "\3\20\1\0\4\20\7\0\2\20\1\0\3\16\5\0\2\16\2\20"+
    "\2\0\12\20\20\0\1\16\3\20\1\0\10\16\1\0\3\16\1\0"+
    "\27\16\1\0\12\16\1\0\5\16\2\0\1\20\1\16\7\20\1\0"+
    "\3\20\1\0\4\20\7\0\2\20\7\0\1\16\1\0\2\16\2\20"+
    "\2\0\12\20\1\0\2\16\15\0\4\20\11\16\1\0\3\16\1\0"+
    "\51\16\2\20\1\16\7\20\1\0\3\20\1\0\4\20\1\16\5\0"+
    "\3\16\1\20\7\0\3\16\2\20\2\0\12\20\12\0\6\16\1\0"+
    "\3\20\1\0\22\16\3\0\30\16\1\0\11\16\1\0\1\16\2\0"+
    "\7\16\3\0\1\20\4\0\6\20\1\0\1\20\1\0\10\20\6\0"+
    "\12\20\2\0\2\20\15\0\60\16\1\20\2\16\7\20\4\0\10\16"+
    "\10\20\1\0\12\20\47\0\2\16\1\0\1\16\1\0\5\16\1\0"+
    "\30\16\1\0\1\16\1\0\12\16\1\20\2\16\11\20\1\16\2\0"+
    "\5\16\1\0\1\16\1\0\6\20\2\0\12\20\2\0\4\16\40\0"+
    "\1\16\27\0\2\20\6\0\12\20\13\0\1\20\1\0\1\20\1\0"+
    "\1\20\4\0\2\20\10\16\1\0\44\16\4\0\24\20\1\0\2\20"+
    "\5\16\13\20\1\0\44\20\11\0\1\20\71\0\53\16\24\20\1\16"+
    "\12\20\6\0\6\16\4\20\4\16\3\20\1\16\3\20\2\16\7\20"+
    "\3\16\4\20\15\16\14\20\1\16\17\20\2\0\46\16\1\0\1\16"+
    "\5\0\1\16\2\0\53\16\1\0\u014d\16\1\0\4\16\2\0\7\16"+
    "\1\0\1\16\1\0\4\16\2\0\51\16\1\0\4\16\2\0\41\16"+
    "\1\0\4\16\2\0\7\16\1\0\1\16\1\0\4\16\2\0\17\16"+
    "\1\0\71\16\1\0\4\16\2\0\103\16\2\0\3\20\40\0\20\16"+
    "\20\0\126\16\2\0\6\16\3\0\u026c\16\2\0\21\16\1\0\32\16"+
    "\5\0\113\16\3\0\13\16\7\0\15\16\1\0\4\16\3\20\13\0"+
    "\22\16\3\20\13\0\22\16\2\20\14\0\15\16\1\0\3\16\1\0"+
    "\2\20\14\0\64\16\40\20\3\0\1\16\3\0\2\16\1\20\2\0"+
    "\12\20\41\0\4\20\1\0\12\20\6\0\131\16\7\0\5\16\2\20"+
    "\42\16\1\20\1\16\5\0\106\16\12\0\37\16\1\0\14\20\4\0"+
    "\14\20\12\0\12\20\36\16\2\0\5\16\13\0\54\16\4\0\32\16"+
    "\6\0\12\20\46\0\27\16\5\20\4\0\65\16\12\20\1\0\35\20"+
    "\2\0\13\20\6\0\12\20\15\0\1\16\10\0\16\20\1\0\2\20"+
    "\77\0\5\20\57\16\21\20\7\16\4\0\12\20\21\0\11\20\14\0"+
    "\3\20\36\16\15\20\2\16\12\20\54\16\16\20\14\0\44\16\24\20"+
    "\10\0\12\20\3\0\3\16\12\20\44\16\2\0\11\16\7\0\53\16"+
    "\2\0\3\16\20\0\3\20\1\0\25\20\4\16\1\20\6\16\1\20"+
    "\2\16\3\20\1\16\5\0\300\16\72\20\1\0\5\20\u0116\16\2\0"+
    "\6\16\2\0\46\16\2\0\6\16\2\0\10\16\1\0\1\16\1\0"+
    "\1\16\1\0\1\16\1\0\37\16\2\0\65\16\1\0\7\16\1\0"+
    "\1\16\3\0\3\16\1\0\7\16\3\0\4\16\2\0\6\16\4\0"+
    "\15\16\5\0\3\16\1\0\7\16\16\0\5\20\32\0\5\20\20\0"+
    "\2\16\23\0\1\16\13\0\5\20\1\0\12\20\1\0\1\16\15\0"+
    "\1\16\20\0\15\16\3\0\40\16\20\0\15\20\4\0\1\20\3\0"+
    "\14\20\21\0\1\16\4\0\1\16\2\0\12\16\1\0\1\16\3\0"+
    "\5\16\6\0\1\16\1\0\1\16\1\0\1\16\1\0\4\16\1\0"+
    "\13\16\2\0\4\16\5\0\5\16\4\0\1\16\21\0\51\16\u0a77\0"+
    "\57\16\1\0\57\16\1\0\205\16\6\0\4\16\3\20\2\16\14\0"+
    "\46\16\1\0\1\16\5\0\1\16\2\0\70\16\7\0\1\16\17\0"+
    "\1\20\27\16\11\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0\40\20"+
    "\57\0\1\16\u01d5\0\3\16\31\0\11\16\6\20\1\0\5\16\2\0"+
    "\5\16\4\0\126\16\2\0\2\20\2\0\3\16\1\0\132\16\1\0"+
    "\4\16\5\0\53\16\1\0\136\16\21\0\40\16\60\0\20\16\u0200\0"+
    "\u19c0\16\100\0\u51fd\16\3\0\u048d\16\103\0\56\16\2\0\u010d\16\3\0"+
    "\20\16\12\20\2\16\24\0\57\16\1\20\4\0\12\20\1\0\37\16"+
    "\2\20\120\16\2\20\45\0\11\16\2\0\147\16\2\0\65\16\2\0"+
    "\11\16\52\0\15\16\1\20\3\16\1\20\4\16\1\20\27\16\5\20"+
    "\4\0\1\20\13\0\1\16\7\0\64\16\14\0\2\20\62\16\22\20"+
    "\12\0\12\20\6\0\22\20\6\16\3\0\1\16\1\0\2\16\13\20"+
    "\34\16\10\20\2\0\27\16\15\20\14\0\35\16\3\0\4\20\57\16"+
    "\16\20\16\0\1\16\12\20\6\0\5\16\1\20\12\16\12\20\5\16"+
    "\1\0\51\16\16\20\11\0\3\16\1\20\10\16\2\20\2\0\12\20"+
    "\6\0\27\16\3\0\1\16\3\20\62\16\1\20\1\16\3\20\2\16"+
    "\2\20\5\16\2\20\1\16\1\20\1\16\30\0\3\16\2\0\13\16"+
    "\5\20\2\0\3\16\2\20\12\0\6\16\2\0\6\16\2\0\6\16"+
    "\11\0\7\16\1\0\7\16\1\0\53\16\1\0\16\16\6\0\163\16"+
    "\10\20\1\0\2\20\2\0\12\20\6\0\u2ba4\16\14\0\27\16\4\0"+
    "\61\16\u2104\0\u016e\16\2\0\152\16\46\0\7\16\14\0\5\16\5\0"+
    "\1\16\1\20\12\16\1\0\15\16\1\0\5\16\1\0\1\16\1\0"+
    "\2\16\1\0\2\16\1\0\154\16\41\0\u016b\16\22\0\100\16\2\0"+
    "\66\16\50\0\15\16\3\0\20\20\20\0\20\20\3\0\2\16\30\0"+
    "\3\16\31\0\1\16\6\0\5\16\1\0\207\16\2\0\1\20\4\0"+
    "\1\16\13\0\12\20\7\0\32\16\4\0\1\16\1\0\32\16\13\0"+
    "\131\16\3\0\6\16\2\0\6\16\2\0\6\16\2\0\3\16\3\0"+
    "\2\16\3\0\2\16\22\0\3\20\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    34,    68,   102,    68,   136,   170,   204,   238,    68, 
       68,    68,    68,   272,   306,   340,   374,   408,   442,   476, 
       68,   510,   544,    68,    68,    68,    68,   578,   612,   646, 
      680,   714,   748,   782,   816,   850,   204,   884,   918,   952, 
      986,    68,    68,   612,  1020,  1054,  1054,  1088,  1122,  1156, 
     1190,   204,   204,  1224,  1258,  1292,  1326,   204,  1360,  1394, 
     1428,  1462,  1496,   204,   204,  1530,  1564,  1598,  1632,   204
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\2\3\1\11"+
    "\1\12\1\13\1\14\1\15\2\10\1\3\1\16\1\17"+
    "\1\10\1\20\1\21\1\22\1\23\1\10\1\24\1\10"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\42\3"+
    "\44\0\1\5\43\0\2\34\1\35\1\0\1\36\35\0"+
    "\2\37\2\0\1\40\1\41\34\0\3\10\2\0\1\10"+
    "\4\0\15\10\13\0\3\10\2\0\1\10\4\0\10\10"+
    "\1\42\4\10\13\0\3\10\2\0\1\43\4\0\15\10"+
    "\13\0\3\10\2\0\1\10\4\0\11\10\1\44\3\10"+
    "\13\0\3\10\2\0\1\10\4\0\7\10\1\45\5\10"+
    "\13\0\3\10\2\0\1\46\4\0\15\10\13\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\47\6\10\13\0\3\10"+
    "\2\0\1\10\4\0\10\10\1\50\4\10\13\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\51\6\10\44\0\1\52"+
    "\41\0\1\53\10\0\2\34\2\0\1\36\35\0\2\54"+
    "\1\0\1\54\1\0\1\54\5\0\1\54\2\0\1\54"+
    "\4\0\1\54\1\0\2\54\13\0\2\36\40\0\2\37"+
    "\2\0\1\36\35\0\2\55\40\0\2\56\4\0\2\57"+
    "\32\0\3\10\2\0\1\10\4\0\5\10\1\60\7\10"+
    "\13\0\3\10\2\0\1\10\4\0\4\10\1\61\10\10"+
    "\13\0\3\10\2\0\1\10\4\0\7\10\1\62\5\10"+
    "\13\0\3\10\2\0\1\10\4\0\11\10\1\63\3\10"+
    "\13\0\3\10\2\0\1\10\4\0\5\10\1\64\7\10"+
    "\13\0\3\10\2\0\1\10\4\0\14\10\1\65\13\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\66\6\10\13\0"+
    "\2\55\3\0\1\41\34\0\2\56\40\0\3\10\2\0"+
    "\1\67\4\0\15\10\13\0\3\10\2\0\1\10\4\0"+
    "\5\10\1\70\7\10\13\0\3\10\2\0\1\10\4\0"+
    "\11\10\1\71\3\10\13\0\3\10\2\0\1\10\4\0"+
    "\12\10\1\72\2\10\13\0\3\10\2\0\1\10\4\0"+
    "\12\10\1\73\2\10\13\0\3\10\2\0\1\10\4\0"+
    "\7\10\1\74\5\10\13\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\75\6\10\13\0\3\10\2\0\1\10\4\0"+
    "\4\10\1\76\10\10\13\0\3\10\2\0\1\77\4\0"+
    "\15\10\13\0\3\10\2\0\1\10\4\0\6\10\1\100"+
    "\6\10\13\0\3\10\2\0\1\10\4\0\7\10\1\101"+
    "\5\10\13\0\3\10\2\0\1\10\4\0\5\10\1\102"+
    "\7\10\13\0\3\10\2\0\1\10\4\0\11\10\1\103"+
    "\3\10\13\0\3\10\2\0\1\104\4\0\15\10\13\0"+
    "\3\10\2\0\1\10\4\0\10\10\1\105\4\10\13\0"+
    "\3\10\2\0\1\10\4\0\7\10\1\106\5\10\13\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\106\6\10\7\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  9,  9,  9,  9,  1,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  9,  9,  9,  9,  0,  0,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	
	private TablaSimbolos tabla;
    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is, TablaSimbolos t){
		this(is);
        symbolFactory = sf;
        this.tabla = t;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader, TablaSimbolos t){
		this(reader);
        symbolFactory = sf;
        this.tabla = t;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[1666];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 11: 
          {  return symbolFactory.newSymbol("DIVISION", 	DIVISION); 	 }
        case 71: break;
        case 26: 
          {  return symbolFactory.newSymbol("MAYORQUE", 	MAYORQUE); 														 }
        case 72: break;
        case 9: 
          {  return symbolFactory.newSymbol("PLUS", PLUS); 			 }
        case 73: break;
        case 20: 
          {  return symbolFactory.newSymbol("SEMI", SEMI); 			 }
        case 74: break;
        case 23: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 75: break;
        case 24: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 76: break;
        case 43: 
          {  return symbolFactory.newSymbol("ENTERO",   	ENTERO, 	  		Long.decode(yytext()).doubleValue());			 }
        case 77: break;
        case 36: 
          {  return symbolFactory.newSymbol("OR", 	      	OR); 														     }
        case 78: break;
        case 63: 
          {  return symbolFactory.newSymbol("VARTYPE",    	VARTYPE, 		yytext()); 											 }
        case 79: break;
        case 51: 
          {  return symbolFactory.newSymbol("NOT", 	    NOT); 															 }
        case 80: break;
        case 69: 
          {  return symbolFactory.newSymbol("VARTYPE", 	VARTYPE, 		yytext());											 }
        case 81: break;
        case 57: 
          {  return symbolFactory.newSymbol("VARTYPE",		VARTYPE, 		yytext());											 }
        case 82: break;
        case 3: 
        case 4: 
          {                                }
        case 83: break;
        case 52: 
          {  return symbolFactory.newSymbol("AND", 	    AND); 														     }
        case 84: break;
        case 45: 
          {  return symbolFactory.newSymbol("ENTERO",  	ENTERO, 			Double.parseDouble(yytext())); 					 }
        case 85: break;
        case 5: 
        case 6: 
        case 30: 
          {  return symbolFactory.newSymbol("ENTERO",   	ENTERO, 	  		Double.parseDouble(yytext()));					 }
        case 86: break;
        case 25: 
          {  return symbolFactory.newSymbol("MENORQUE", 	MENORQUE); 														 }
        case 87: break;
        case 29: 
        case 31: 
        case 44: 
          {  return symbolFactory.newSymbol("ENTERO", 	    ENTERO, 	    	Double.parseDouble(yytext())); 					 }
        case 88: break;
        case 12: 
          {  return symbolFactory.newSymbol("TIMES", TIMES); 			 }
        case 89: break;
        case 10: 
          {  return symbolFactory.newSymbol("MINUS", MINUS); 			 }
        case 90: break;
        case 17: 
          {  return symbolFactory.newSymbol("UMINUS", UMINUS); 		 }
        case 91: break;
        case 42: 
          {  return symbolFactory.newSymbol("IGUALQUE", 	IGUALQUE);														 }
        case 92: break;
        case 2: 
        case 21: 
        case 22: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 93: break;
        case 64: 
          {  return symbolFactory.newSymbol("VECTOR", 	  	VECTOR); 															 }
        case 94: break;
        case 7: 
        case 8: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 18: 
        case 19: 
        case 33: 
        case 34: 
        case 35: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
          {  Simbolo s ;
			  				if (( s = tabla.buscar(yytext())) == null){
			  					s = tabla.insertar(yytext());
			  				}
			  				return symbolFactory.newSymbol("IDENT",     	IDENT, s );	     }
        case 95: break;
        case 41: 
          {  return symbolFactory.newSymbol("ASIGNACION", 	ASIGNACION); }
        case 96: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
