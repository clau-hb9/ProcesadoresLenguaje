/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.Hashtable;

parser code {:
  	protected Lexer lexer;


	Hashtable resgitroTable = new Hashtable();


	private void result (Double number) {
		if (isDouble(number)) { System.out.print(number); }
		else 			 	  { System.out.print(number.intValue()); }
 	}

	private boolean isDouble(Double number) {
		return number != null && number.intValue() != number;
  	}
	
	
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal String         VECTOR, WHILE, ENDWHILE, ENDIF, IF, ELSE, THEN, AND, OR, NOT,  PUNTO, 
						COMA, SEMI, LPAREN, RPAREN, LBRACKET, RBRACKET, ASIGNACION, UMINUS, PLUS, MINUS, TIMES, DIVISION, MENORQUE, 
						MAYORQUE, MENORIGQUE, MAYORIGQUE, IGUALQUE, IDENT;
									
terminal String 		VARTYPE;	
				
terminal Double    		ENTERO;
terminal Double			REAL;        
terminal String 		BOOLEAN; 
terminal String			CARACTER;



/* Non terminals */
non terminal           				program, sentencia, sent_decl, sent_uso, sent_flujo, decl_variable, asignacion, expresion,
									condicional, bucle, identificador, else_condicional,bloque_sentencias,
									Ejecucion, campos, dimension, booleano, identifier_val,
									
 									variable_declaration, multiple_declaration, 
									multiple_declaration_, params, params_, fields, identifier, conditional, loop, function_call, expr_list, 
									expr_list_, inner_block, inner_sentence, regular_declaration, else_conditional;

non terminal Double	    			expr, operando;
non terminal String					expr_, operando_;


/* Precedences */
precedence nonassoc 				LPAREN;

precedence left 					AND, OR;
precedence left 					NOT;

precedence nonassoc 				MENORQUE, MAYORQUE, MENORIGQUE, MAYORIGQUE, IGUALQUE;

precedence left 					PLUS, MINUS;
precedence left 					TIMES, DIVISION;
precedence left 					UMINUS;

/* The grammar rules */

Ejecucion				::= 	bloque_sentencias:b1
								{: System.out.println(b1);				:}
							
							;


bloque_sentencias		::= 	sentencia:s1	
								{: RESULT=  s1 ; 							:}
								
							|	bloque_sentencias:b1 sentencia:s1
								{: RESULT= b1 + "\n" + s1; 				:}
							;

sentencia				::=		sent_decl:s1
								{: RESULT=  s1; 						:}		

							|	sent_uso:s1  	
								{: RESULT=  s1;  						:}
								
							|	sent_flujo:s1	
								{: RESULT=  s1; 						:}
							;
	

// DECLARACION
sent_decl				::=		decl_variable:d1 		SEMI
								{: RESULT=  d1 + ";"; 	:}	

							| 	multiple_declaration:d1 SEMI
								{: RESULT=  d1 + ";"; 	:}
							;	


							
							
decl_variable 			::=		VARTYPE:t1 IDENT:i1 ASIGNACION expr:e1
								{: 	
									if (t1.toLowerCase().equals("entero")){
										resgitroTable.put( i1, e1.intValue() );
										Integer value = ( Integer ) resgitroTable.get( i1);	
										RESULT= "INICIALIZO " + i1 + " := " + value ;	
									}
									else if (t1.toLowerCase().equals("real")){
										resgitroTable.put( i1, e1 );
										Double value = ( Double ) resgitroTable.get( i1);	
										RESULT= "INICIALIZO " + i1 + " := " + value ;		
									}																			:}
								
								
							|	VARTYPE:t1 IDENT:i1 ASIGNACION expr_:e1
								{: 
									if (t1.toLowerCase().equals("booleano")){
										resgitroTable.put( i1, Boolean.parseBoolean(e1) );
										Boolean value = ( Boolean ) resgitroTable.get( i1);	
										RESULT= "ASIGNO " + i1 + " := " + value ;		
									}
									else if (t1.toLowerCase().equals("caracter")){
										resgitroTable.put( i1, e1.charAt(1) );
										Character value = ( Character ) resgitroTable.get( i1);	
										RESULT= "ASIGNO " + i1 + " := " + value ;		
									}

																												:}	
								
							|	VARTYPE:t1 IDENT:i1 
								{: 
									if (t1.toLowerCase().equals("entero")){
										resgitroTable.put( i1, 0 );
										Integer value = ( Integer ) resgitroTable.get( i1);	
										RESULT= "INICIALIZO " + i1 + " := " + value ;	
									}
									else if (t1.toLowerCase().equals("real")){
										resgitroTable.put( i1, 0.0 );
										Double value = ( Double ) resgitroTable.get( i1);	
										RESULT= "INICIALIZO " + i1 + " := " + value ;		
									}
									else if (t1.toLowerCase().equals("booleano")){
										resgitroTable.put( i1, false );
										Boolean value = ( Boolean ) resgitroTable.get( i1);	
										RESULT= "INICIALIZO " + i1 + " := " + value ;		
									}
									else if (t1.toLowerCase().equals("caracter")){
										resgitroTable.put( i1, ' ' );
										Character value = ( Character ) resgitroTable.get( i1);	
										RESULT= "INICIALIZO " + i1 + " := " + value ;		
									}

																												:}
							
							|	VECTOR VARTYPE:t1 IDENT:i1 dimension:d1
								{: RESULT = "VECTOR " + t1 + " " + i1 + d1;  									:}
							;
							
							
multiple_declaration	::=		 decl_variable:d1  multiple_declaration_:m1
								{: RESULT= d1 +" "+ m1 ;  														:}
								
							;
							

multiple_declaration_ 	::=		COMA IDENT:i1 multiple_declaration_:m1
								{: RESULT = ", " +  i1 +" "+ m1; 												:}
								
							|	COMA IDENT:i1
								{: RESULT = ", " + i1;  														:}
							
							;						
						
						
dimension				::=		dimension:d1 	LBRACKET 	expr:e1 	RBRACKET 
								{:	RESULT= d1 + "["+ e1.intValue() +"]";  										:}
						
							| 	LBRACKET 		expr:e1 	RBRACKET
									
								{: 	RESULT= "["+ e1.intValue() +"]";  											:}
								
							;
						
							

								

// USO							
sent_uso				::=		asignacion:a1 	SEMI	
								{: RESULT=  a1 + ";"; 								:}
								
							|	expr_:s1  		SEMI
								{: RESULT=  s1 + ";"; 								:}
							
							|	expr :s1		SEMI
								{: 	
									if (isDouble(s1)){	
										RESULT=  s1 + ";"; 	 	
									}
									else {
										RESULT=  s1.intValue() + ";" ;	
										
									}												:}
									
							|	booleano:b1 	SEMI
								{: RESULT=  b1 ; 									:}
																						
	
							;	
	
	
asignacion				::=		IDENT:i1 ASIGNACION	expr:e1								{: 	if (isDouble(e1)){
																								RESULT = i1+" := " + e1 ;	
																							}
																					 		else {
																								RESULT = i1+" := " + e1.intValue() ;	
																							}																							:}
							
							|	IDENT:i1 ASIGNACION	expr_:b1							{: RESULT = i1+ " := " + b1; 																	:}
							
							|	IDENT:i1 dimension:d1 ASIGNACION	expr:e1				{: 	if (isDouble(e1)){
																								RESULT = i1 +" " + d1 + ":= " + e1;
																							}
																					 		else {
																								RESULT = i1 +" " + d1 + ":= " + e1.intValue();
																							}																							:}
							
							|	IDENT:i1 dimension:d2 ASIGNACION	expr_:b1			{: RESULT = i1 + " " + d2 + ":= " + b1;  														:}
							;
	


booleano				::= 	expr:a1 	MENORQUE 	expr:a2 						{: 	if (a1 < a2) {
																								RESULT = "True";
																							}
																							else {
																								RESULT = "False";
																							}
																																														:}
							|	expr:a1 	MAYORQUE 	expr:a2 						{: 	if (a1 > a2) {
																								RESULT = "True";
																							}
																							else {
																								RESULT = "False";
																							}																							:}
							
							|	expr:a1 	IGUALQUE 	expr:a2 						{: 	if (a1 == a2) {
																								RESULT = "True";
																							}
																							else {
																								RESULT = "False";
																							}																							:}
																							
							|	expr:a1 	MENORIGQUE 	expr:a2 						{: 	if (a1 <= a2) {
																								RESULT = "True";
																							}
																							else {
																								RESULT = "False";
																							}																							:}
																							
							|	expr:a1 	MAYORIGQUE 	expr:a2 						{: 	if (a1 >= a2) {
																								RESULT = "True";
																							}
																							else {
																								RESULT = "False";
																							}																							:}
							;



							
							
expr					::= 	expr:a1 	PLUS 		operando:a2 					{: RESULT = a1 + a2;	/*	System.out.println("Detecto la resta: " + a1 + "-" + a2 ); 	*/		:}
							|	expr:a1 	MINUS   	operando:a2						{: RESULT = a1 - a2;	/*	System.out.println("Detecto la resta: " + a1 + "-" + a2 ); 	*/		:}		
							|	expr:a1 	DIVISION 	operando:a2						{: RESULT = a1 / a2; 		/*System.out.println("Detecto la div: " + a1 + "/" + a2 );	*/		:}
							|	expr:a1 	TIMES   	operando:a2						{: RESULT = a1 * a2; 		/*System.out.println("Detecto la multi: " + a1 + "*" + a2 );*/		:}
							
							| 	operando:a1												{: RESULT = a1;																					:}
							|	LPAREN 		expr:a1 	RPAREN							{: RESULT = a1;					/*System.out.println(a1 );		*/								:}
							|	identifier_val:a1										{: RESULT = new Double(a1.toString());																					:}
							
							
							;
																												
expr_					::= 
							|	operando_:a1											{: RESULT = a1;																					:}
							|	LPAREN 		expr_:a1 	RPAREN							{: RESULT = a1;					/*System.out.println(a1 );	*/									:}
							
									
							

							;
							
operando				::= 	ENTERO:n	    										{: RESULT = n;  		/*System.out.println("Detecto entero: " + n);	*/						:}
							|	REAL:n													{: RESULT = n;			/*System.out.println("Detecto real: " + RESULT); 	*/					:}
							

						;
						
operando_				::= 	CARACTER:c1												{: RESULT = c1;			/*System.out.println("caracter: " + RESULT); 	*/						:}
							|	BOOLEAN:b1												{: RESULT = b1;			/*System.out.println("booleano: " + RESULT); 	*/						:}
									

						;
						
identifier_val			::=		IDENT:name									{:RESULT=resgitroTable.get( name );:}	/*{: if (isInteger(resgitroTable.get(name)) | isDouble(resgitroTable.get(name))){
																								Double value = ( Double ) resgitroTable.get( name );
																								if ( value == null ) {
																									parser.report_error( "Undeclared Identifier " + name, new Symbol( sym.IDENT, name ) );
																									value = new Double( 0.0 );
									
																								}
																								
																						
																								
																							}
																							else if (isBoolean(resgitroTable.get(name)) | isLetter(resgitroTable.get(name))){
																								String value = ( String ) resgitroTable.get( name );
																									if ( value == null ) {
																										parser.report_error( "Undeclared Identifier " + name, new Symbol( sym.IDENT, name ) );
																										value = new String(" ");
									
																									}
																								
											
																							RESULT = value;		:}*/
						;


// FLUJO

sent_flujo				::=		condicional 
							|	bucle  
							;	
							
condicional				::=		IF 
								{:System.out.println("comienza CONDICIONAL ");  :}

								expr:e1 
								{:  :}

								THEN inner_block:i1 else_condicional:c1
								{:  :}
							;


else_condicional		::=		ELSE 
								{: :}

								inner_block ENDIF
								
							|	ENDIF
							;
							
bucle					::=		WHILE
								{: System.out.println("comienza BUCLE "); :}

								expr
								{:  :}

								inner_block ENDWHILE
								{:  :}
							;	
							
							
inner_block				::=		inner_block inner_sentence

							|	inner_sentence
							;
						
inner_sentence			::=		sent_decl 	

							|	sent_uso  		
								
							|	sent_flujo			
							;
							